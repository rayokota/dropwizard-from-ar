package com.yammer.<%= service_name %>.service.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Sets;
import org.hibernate.annotations.BatchSize;

import javax.persistence.*;
import java.util.Objects;
import java.util.Set;

@Entity
@Table(name = "<%= model_defn.table_name %>")
@JsonIgnoreProperties({
<% model_defn.associations.each_with_index do |assoc, i| %>
    <% if assoc.inverse_assoc? %>
        "<%= assoc.field_name.camelcase.down_first %>"<%if i < model_defn.associations.size - 1 %>,<% end %>
    <% end %>
<% end %>
})
public class <%=  model_defn.model_name %> {
    @Id
    @GeneratedValue
    private long id;

    // Fields
<% model_defn.fields.each do |field_defn| %>
    <% unless model_defn.foreign_key?(field_defn) %>

    @Column(name = "<%= field_defn.name %>")
    private <%= field_defn.java_type %> _<%= field_defn.name %>;
    <% end %>
<% end %>

    // Associations
<% model_defn.associations.each do |assoc| %>
    <% if assoc.inverse_assoc? %>

    <%= assoc.assoc_impl %>

    private <%= assoc.assoc_getter_type %> _<%= assoc.field_name %>;
    <% end %>
<% end %>

    public long getId() {
        return id;
    }

<% model_defn.fields.each do |field_defn| %>
    <% unless model_defn.foreign_key?(field_defn) %>

    public <%= field_defn.java_type %> <%= field_defn.getter %> {
        return _<%= field_defn.name %>;
    }

    public void set<%= field_defn.name.camelcase %>(<%= field_defn.java_type %> newval) {
        this._<%= field_defn.name %> = newval;
    }
    <% end %>
<% end %>

<% model_defn.associations.each do |a| %>
    <% if a.inverse_assoc? %>

    public <%= a.assoc_getter_type %> <%= a.assoc_getter %>() {
        return _<%= a.field_name %>;
    }
    <% end %>
<% end %>
}


/*
<% model_defn.associations.each do |a| %>
<% if a.assoc_model.database_defn != model_defn.database_defn %>
<%= a.assoc_model.import %> 
<% end %>
<% end %>

public class <%=model_defn.model_name%> extends ModelWithId<<%= model_defn.model_name %>, IDatabases> {
  // Fields
  <% model_defn.fields.each do |field_defn| %>
  private <%= field_defn.java_type %> __<%= field_defn.name %>;
  <% end %>

  // Associations
  <% model_defn.associations.each do |assoc| %>
  private <%= assoc.java_type %> <%= assoc.field_name %>;
  <% end %>

  public enum _Fields {
  <% model_defn.fields.each do |field_defn| %>
    <%= field_defn.name %>,
  <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= create_signature_full.empty? ? "" : ", " %><%= create_signature_full %>, IDatabases databases) {
    super(id);
  <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>

  <% model_defn.associations.each do |assoc| %>
    this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= create_signature_full.empty? ? "" : ", " %><%= create_signature_full %>) {
    super(id);
  <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>
  }

  public <%= model_defn.model_name %>(long id, Map<Enum, Object> fieldsMap) {
    super(id);
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.default_value.nil? %>
    <%= field_defn.java_type %> <%= field_defn.name %> = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <% else %>
    <%= field_defn.java_type(true) %> <%= field_defn.name %>_tmp = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <%= field_defn.java_type %> <%= field_defn.name %> = <%= field_defn.name %>_tmp == null ? <%= field_defn.default_value %> : <%= field_defn.name %>_tmp;
    <% end %>
    <% end %>

    <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
    <% end %>
  }

  public <%= model_defn.model_name %> (<%= model_defn.model_name %> other) {
    this(other, (IDatabases)null);
  }

  public <%= model_defn.model_name %> (<%= model_defn.model_name %> other, IDatabases databases) {
    super(other.getId());
  <% model_defn.fields.each do |field_defn| %>
    <% copy =  "other.#{field_defn.getter}" %>
    <% copy = field_defn.java_type == 'byte[]' ? "copyBinary(#{copy})" : copy %>
    this.__<%= field_defn.name %> = <%= copy %>;
  <% end %>

    if (databases != null) {
  <% model_defn.associations.each do |assoc| %>
      this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
    }
  }

<% model_defn.fields.each do |field_defn| %>

  public <%= field_defn.java_type %> <%= field_defn.getter %>{
    return __<%= field_defn.name %>;
  }

  public void set<%= field_defn.name.camelcase %>(<%= field_defn.java_type %> newval){
    this.__<%= field_defn.name %> = newval;
    cachedHashCode = 0;
  }
<% end %>

  public void setField(_Fields field, Object value) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        set<%= field_defn.name.camelcase %>((<%= field_defn.java_type(true) %>) value);
        break;
  <% end %>
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      set<%= field_defn.name.camelcase %>((<%= field_defn.java_type(true) %>)  value);
      return;
    }
  <% end %>
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        return <%= field_defn.java_type %>.class;
  <% end %>
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return <%= field_defn.java_type %>.class;
    }
  <% end %>
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

<% model_defn.associations.each do |a| %>

  public <%= a.assoc_getter_type %> <%= a.assoc_getter %>() throws IOException {
    return <%= a.field_name %>.get();
  }
<% end %>

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return <%= field_defn.getter %>;
    }
  <% end %>
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        return <%= field_defn.getter %>;
  <% end %>
    }
    throw new IllegalStateException("Invalid field: " + field);
  }
  
   public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return true;
    }
  <% end %>
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        return <%= field_defn.default_value.nil? ? "null" : field_defn.default_value %>;
  <% end %>
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public <%= model_defn.model_name %> getCopy() {
    return new <%= model_defn.model_name %>(this);
  }

  public <%= model_defn.model_name %> getCopy(IDatabases databases) {
    return new <%= model_defn.model_name %>(this, databases);
  }

  public String toString() {
    return "<<%= model_defn.model_name %>"
      <% model_defn.fields.each do |field_defn| %>
      + " <%= field_defn.name %>: " + __<%= field_defn.name %>
      <% end %>
      + ">";
  }
}
    */
